
syntax = "proto3";
option go_package = "github.com/mroy31/gonetem/internal/proto";

package netem;
import "google/protobuf/empty.proto";

service Netem {
    // general action
    rpc GetVersion(google.protobuf.Empty) returns (VersionResponse) {}
    rpc PullImages(google.protobuf.Empty) returns (stream PullSrvMsg) {}
    rpc Clean(google.protobuf.Empty) returns (AckResponse) {}

    // Project actions
    rpc GetProjects(google.protobuf.Empty) returns (PrjListResponse) {}
    rpc OpenProject(OpenRequest) returns (PrjOpenResponse) {}
    rpc CloseProject(ProjectRequest) returns (AckResponse) {}
    rpc SaveProject(ProjectRequest) returns (FileResponse) {}
    rpc GetProjectConfigs(ProjectRequest) returns (FileResponse) {}
    rpc GetProjectStatus(ProjectRequest) returns (StatusResponse) {}

    // Read/Write network topology
    rpc ReadNetworkFile(ProjectRequest) returns (FileResponse) {}
    rpc WriteNetworkFile(WNetworkRequest) returns (AckResponse) {}

    // topology actions
    rpc Check(ProjectRequest) returns (AckResponse) {}
    rpc Reload(ProjectRequest) returns (RunResponse) {}
    rpc Run(ProjectRequest) returns (RunResponse) {}

    // Node actions
    rpc ReadConfigFiles(NodeRequest) returns (ConfigFilesResponse) {}
    rpc CanRunConsole(NodeRequest) returns (AckResponse) {}
    rpc Console(stream ConsoleCltMsg) returns (stream ConsoleSrvMsg) {}
    rpc Start(NodeRequest) returns (AckResponse) {}
    rpc Stop(NodeRequest) returns (AckResponse) {}
    rpc Restart(NodeRequest) returns (AckResponse) {}
    rpc SetIfState(NodeIfStateRequest) returns (AckResponse) {}
    rpc Capture(NodeInterfaceRequest) returns (stream CaptureSrvMsg) {}
    rpc CopyFrom(CopyMsg) returns (stream CopyMsg) {}
    rpc CopyTo(stream CopyMsg) returns (AckResponse) {}

    // Link actions
    rpc LinkUpdate(LinkRequest) returns (AckResponse) {}

}

// global enums

enum StatusCode {
    OK = 0;
    ERROR = 1;
}

enum IfState {
    UP = 0;
    DOWN = 1;
}



// Stream messages

message CopyMsg {
    enum Code {
        INIT = 0;
        DATA = 1;
        ERROR = 3;
    }

    Code code = 1;
    string prjId = 2;
    string node = 3;
    string nodePath = 4;
    bytes data = 5;
}

message ConsoleCltMsg {
    enum Code {
        INIT = 0;
        DATA = 1;
        RESIZE = 2;
        CLOSE = 3;
    }

    Code code = 1;
    string prjId = 2;
    string node = 3;
    bool shell = 4;
    int32 ttyWidth = 5;
    int32 ttyHeight = 6;
    bytes data = 7;
}

message ConsoleSrvMsg {
    enum Code {
        STDOUT = 0;
        STDERR = 1;
        ERROR = 2;
        CLOSE = 3;
    }

    Code code = 1;
    bytes data = 3;
}

message PullSrvMsg {
    enum Code {
        START = 0;
        OK = 1;
        ERROR = 2;
    }

    Code code = 1;
    string image = 2;
    string error = 3;
}

message CaptureSrvMsg {
    enum Code {
        STDOUT = 0;
        STDERR = 1;
        OK = 2;
        ERROR = 3;
    }

    Code code = 1;
    bytes data = 2;
}

// Request messages

message LinkConfig {
    string peer1 = 1;
    string peer2 = 2;
    float loss = 3;
    int32 delay = 4;
    int32 jitter = 5;
}

message LinkRequest {
    string prjId = 1;
    LinkConfig link = 2;
}

message NodeIfStateRequest {
    string prjId = 1;
    string node = 2;
    int32 ifIndex = 3;
    IfState state = 4;
}

message NodeInterfaceRequest {
    string prjId = 1;
    string node = 2;
    int32 ifIndex = 3;
}

message NodeRequest {
    string prjId = 1;
    string node = 2;
}

message ProjectRequest {
    string id = 1;
}

message WNetworkRequest {
    string id = 1;
    bytes data = 2;
}

message OpenRequest {
    string name = 1;
    bytes data = 2;
}

// Response messages

message Status {
    StatusCode code = 1;
    string error = 2;
}

message AckResponse {
    Status status = 1;
}

message RunResponse {
    message NodeMessages {
        string name = 1;
        repeated string messages = 2;
    }

    Status status = 1;
    repeated NodeMessages nodeMessages = 2;
}

message FileResponse {
    Status status = 1;
    bytes data = 2;
}

message VersionResponse {
    Status status = 1;
    string version = 2;
}

message StatusResponse {
    message IfStatus {
        string name = 1;
        IfState state = 2;
    }

    message NodeStatus {
        string name = 1;
        bool running = 2;
        repeated IfStatus interfaces = 10;
    }

    Status status = 1;
    string name = 2;
    string id = 3;
    string openAt = 4;
    bool running = 5;
    repeated NodeStatus nodes = 10;
}

message ConfigFilesResponse {
    enum Source {
        ARCHIVE = 0;
        RUNNING = 1;
    }

    message ConfigFile {
        string name = 1;
        bytes data = 2;
    }

    Status status = 1;
    Source source = 2;
    repeated ConfigFile files = 3;
}

message PrjListResponse {
    message Info {
        string id = 1;
        string name = 2;
        string openAt = 3;
    }

    Status status = 1;
    repeated Info projects = 2;
}

message PrjOpenResponse {
    Status status = 1;
    string id = 2;
}
